#!/usr/bin/python3

import sys
import argparse
import socket
import ssl

from messages import Message, EmptyMessageException


__author__ = 'Nick Jones'


def parse_message(conn, data):
    """
    This function will find which type of message the data is and create a response.
    :param data: The data from the server
    :return: True if the message is the final message from the server. Else false.
    """
    message = Message.modelData(data)
    message.do(conn)
    return message.is_final()


def make_connection(secure, hostname, port):
    """
    Create a socket to communicate over.
    :param secure:  Use SSL if true, otherwise don't
    :param hostname: The hostname to connect to.
    :param port: The port to connect on
    :return: A (secured) socket connected to [hostname:port]
    """
    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    if secure:
        conn = ssl.wrap_socket(conn)
    conn.connect((hostname, port))
    return conn


def send_recv_loop(conn):
    """
    Run the send-receive loop.
    For each cycle, receive from the server, and perform a response.
    Break the loop when the final message (BYE) is received from
    the server, or the message is empty.
    :param conn: The socket to communicate over.
    :return: Nothing
    """
    while True:
        message = conn.recv(256).decode()
        if message == "":
            raise EmptyMessageException("Message from server empty.  Something went wrong.")
        final = parse_message(conn, message)
        if final:
            break


def main(args):
    """
    This is the entry point for the program.

    To run the program, run the following in the command line.
        ./client <-p port> <-s> [hostname] [NEU ID]

    Run "./client -h" for more info

    :return: Return nothing.
    """
    conn = make_connection(args.secure, args.hostname, args.port)
    conn.sendall("cs5700spring2015 HELLO {}\n".format(args.id).encode())
    send_recv_loop(conn)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Do lots of meaningless math over the network!")
    parser.add_argument("-p", "--port", help="The server port to connect to", type=int, default=27993)
    parser.add_argument("-s", "--secure", help="Use a secure socket", action='store_true')
    parser.add_argument("hostname", help="The hostname of the server")
    parser.add_argument("id", help="The NEU id of the student running the program.  Must have all leading zeros.")
    args = parser.parse_args()
    if "-p" not in sys.argv and args.secure:
        args.port = 27994
    main(args)
